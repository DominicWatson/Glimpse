/* gimpattribute.h generated by valac 0.24.0, the Vala compiler, do not modify */


#ifndef __GIMPATTRIBUTE_H__
#define __GIMPATTRIBUTE_H__

#include <glib.h>

G_BEGIN_DECLS

#define GIMP_TYPE_ATTRIBUTE            (gimp_attribute_get_type ())
#define GIMP_ATTRIBUTE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GIMP_TYPE_ATTRIBUTE, GimpAttribute))
#define GIMP_ATTRIBUTE_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GIMP_TYPE_ATTRIBUTE, GimpAttributeClass))
#define GIMP_IS_ATTRIBUTE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GIMP_TYPE_ATTRIBUTE))
#define GIMP_IS_ATTRIBUTE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GIMP_TYPE_ATTRIBUTE))
#define GIMP_ATTRIBUTE_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GIMP_TYPE_ATTRIBUTE, GimpAttributeClass))
#define GIMP_ATTRIBUTE_GET_PRIVATE(o)  (G_TYPE_INSTANCE_GET_PRIVATE ((o), GIMP_TYPE_ATTRIBUTE, GimpAttributePrivate))

#define GIMP_TYPE_ATTRIBUTE_TAG_TYPE (gimp_attribute_tag_type_get_type ())

GType gimp_attribute_tag_type_get_type (void) G_GNUC_CONST;

typedef enum  {
  TYPE_INVALID,
  TYPE_LONG,
  TYPE_SLONG,
  TYPE_FLOAT,
  TYPE_DOUBLE,
  TYPE_SHORT,
  TYPE_SSHORT,
  TYPE_DATE,
  TYPE_TIME,
  TYPE_ASCII,
  TYPE_UNICODE,
  TYPE_BYTE,
  TYPE_MULTIPLE,
  TYPE_RATIONAL,
  TYPE_SRATIONAL,
  TYPE_UNKNOWN,
  NUM_VALUE_TYPES
} GimpAttributeValueType;

typedef enum  {
  STRUCTURE_TYPE_BAG,
  STRUCTURE_TYPE_SEQ,
  STRUCTURE_TYPE_ALT,
  STRUCTURE_TYPE_LANG,
  STRUCTURE_TYPE_NONE,
  STRUCTURE_TYPE_STRUCT,
  NUM_STRUCTURE_TYPES
} GimpAttributeStructureType;

typedef enum {
  TAG_INVALID,
  TAG_EXIF,
  TAG_XMP,
  TAG_IPTC,
  TAG_GIMP,
  TAG_MISC,
  NUM_TAG_TYPES
} GimpAttributeTagType;

GType                       gimp_attribute_get_type                       (void) G_GNUC_CONST;

GimpAttribute*              gimp_attribute_new_string                     (const gchar                *name,
                                                                           gchar                      *value,
                                                                           GimpAttributeValueType      type);
const gchar*                gimp_attribute_get_interpreted_string         (GimpAttribute              *attribute);
void                        gimp_attribute_set_interpreted_string         (GimpAttribute              *attribute,
                                                                           const gchar                *value);
GimpAttribute*              gimp_attribute_copy                           (GimpAttribute              *attribute);
gboolean                    gimp_attribute_is_valid                       (GimpAttribute              *attribute);
const gchar*                gimp_attribute_get_attribute_type             (GimpAttribute              *attribute);
const gchar*                gimp_attribute_get_attribute_ifd              (GimpAttribute              *attribute);
const gchar*                gimp_attribute_get_attribute_tag              (GimpAttribute              *attribute);
const gboolean              gimp_attribute_is_new_namespace               (GimpAttribute              *attribute);
const gchar*                gimp_attribute_get_name                       (GimpAttribute              *attribute);
const gchar*                gimp_attribute_get_sortable_name              (GimpAttribute              *attribute);
GValue                      gimp_attribute_get_value                      (GimpAttribute              *attribute);
gchar*                      gimp_attribute_get_string                     (GimpAttribute              *attribute);
GimpAttributeTagType        gimp_attribute_get_tag_type                   (GimpAttribute              *attribute);
GimpAttributeValueType      gimp_attribute_get_value_type_from_string     (const gchar                *string);
GimpAttributeValueType      gimp_attribute_get_value_type                 (GimpAttribute              *attribute);
void                        gimp_attribute_set_value_type                 (GimpAttribute              *attribute,
                                                                           GimpAttributeValueType      value_type);
gboolean                    gimp_attribute_has_structure                  (GimpAttribute              *attribute);
GSList*                     gimp_attribute_get_attribute_structure        (GimpAttribute              *attribute);
void                        gimp_attribute_set_structure_type             (GimpAttribute              *attribute,
                                                                           GimpAttributeStructureType  value);
GimpAttributeStructureType  gimp_attribute_get_structure_type             (GimpAttribute              *attribute);
gdouble                     gimp_attribute_get_gps_degree                 (GimpAttribute              *attribute);
gchar*                      gimp_attribute_get_xml                        (GimpAttribute              *attribute);
void                        gimp_attribute_print                          (GimpAttribute              *attribute);

G_END_DECLS

#endif
